// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MPCClient is the client API for MPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MPCClient interface {
	Test(ctx context.Context, opts ...grpc.CallOption) (MPC_TestClient, error)
}

type mPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMPCClient(cc grpc.ClientConnInterface) MPCClient {
	return &mPCClient{cc}
}

func (c *mPCClient) Test(ctx context.Context, opts ...grpc.CallOption) (MPC_TestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MPC_serviceDesc.Streams[0], "/protobuf.MPC/Test", opts...)
	if err != nil {
		return nil, err
	}
	x := &mPCTestClient{stream}
	return x, nil
}

type MPC_TestClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type mPCTestClient struct {
	grpc.ClientStream
}

func (x *mPCTestClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mPCTestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MPCServer is the server API for MPC service.
// All implementations must embed UnimplementedMPCServer
// for forward compatibility
type MPCServer interface {
	Test(MPC_TestServer) error
	mustEmbedUnimplementedMPCServer()
}

// UnimplementedMPCServer must be embedded to have forward compatible implementations.
type UnimplementedMPCServer struct {
}

func (UnimplementedMPCServer) Test(MPC_TestServer) error {
	return status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedMPCServer) mustEmbedUnimplementedMPCServer() {}

// UnsafeMPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPCServer will
// result in compilation errors.
type UnsafeMPCServer interface {
	mustEmbedUnimplementedMPCServer()
}

func RegisterMPCServer(s grpc.ServiceRegistrar, srv MPCServer) {
	s.RegisterService(&_MPC_serviceDesc, srv)
}

func _MPC_Test_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MPCServer).Test(&mPCTestServer{stream})
}

type MPC_TestServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type mPCTestServer struct {
	grpc.ServerStream
}

func (x *mPCTestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mPCTestServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MPC",
	HandlerType: (*MPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Test",
			Handler:       _MPC_Test_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
